import anon.atom as anp
from anon import quad

@anon.dual.generator(5)
def elem_0001(f=None,a1=1.0, a2=0.0):
    state = {}
    if f is None:
        f = lambda x: 0.0
    def transf(xi: float,x_nodes)->float:
        return ( x_nodes[0]*(2*xi**4/3 - 2*xi**3/3 - xi**2/6 + xi/6) 
               + x_nodes[1]*(-8*xi**4/3 + 4*xi**3/3 + 8*xi**2/3 - 4*xi/3) 
               + x_nodes[2]*(4*xi**4 - 5*xi**2 + 1) 
               + x_nodes[3]*(-8*xi**4/3 - 4*xi**3/3 + 8*xi**2/3 + 4*xi/3) 
               + x_nodes[4]*(2*xi**4/3 + 2*xi**3/3 - xi**2/6 - xi/6)
    )
    def grad_transf(xi,x_nodes):
        return (x_nodes[0]*(8*xi**3/3 - 2*xi**2 - xi/3 + 1/6) 
              + x_nodes[1]*(-32*xi**3/3 + 4*xi**2 + 16*xi/3 - 4/3) 
              + x_nodes[2]*(16*xi**3 - 10*xi) 
              + x_nodes[3]*(-32*xi**3/3 - 4*xi**2 + 16*xi/3 + 4/3) 
              + x_nodes[4]*(8*xi**3/3 + 2*xi**2 - xi/3 - 1/6)
        )
    
    quad_points = quad.quad_points(n=5,rule="gauss-legendre")
#     quad_points = quad.quad_points(n=5,rule="mid")
    @jax.jit
    def jacx(u=None,y=None,state=None,xyz=None, a1=a1, a2=a2):
        x_nodes = [ x[0] for x in xyz]
        return sum(
          anp.array(
            [
              [
                a1*(2*xi*(1/3 - 2*xi/3)*(1/2 - xi/2) + xi*(1/3 - 2*xi/3)*(-2*xi - 1)/2 + 2*xi*(1/2 - xi/2)*(-2*xi - 1)/3 + (1/3 - 2*xi/3)*(-2*xi - 1)*(xi/2 - 1/2))**2 + a2*(4*xi**9/81 - xi**8/9 + 2*xi**7/63 + 2*xi**6/27 - 7*xi**5/180 - xi**4/72 + xi**3/108),
                a1*(2*xi*(1/3 - 2*xi/3)*(1/2 - xi/2) + xi*(1/3 - 2*xi/3)*(-2*xi - 1)/2 + 2*xi*(1/2 - xi/2)*(-2*xi - 1)/3 + (1/3 - 2*xi/3)*(-2*xi - 1)*(xi/2 - 1/2))*(-4*xi*(1/2 - xi)*(2/3 - 2*xi/3) + 4*xi*(1/2 - xi)*(2*xi + 2)/3 + 2*xi*(2/3 - 2*xi/3)*(2*xi + 2) + (2/3 - 2*xi/3)*(2*xi - 1)*(2*xi + 2)) + a2*(-16*xi**9/81 + xi**8/3 + 4*xi**7/21 - 5*xi**6/9 + 2*xi**5/15 + xi**4/6 - 2*xi**3/27),
                a1*(2*xi*(1/3 - 2*xi/3)*(1/2 - xi/2) + xi*(1/3 - 2*xi/3)*(-2*xi - 1)/2 + 2*xi*(1/2 - xi/2)*(-2*xi - 1)/3 + (1/3 - 2*xi/3)*(-2*xi - 1)*(xi/2 - 1/2))*(2*(1 - 2*xi)*(1 - xi)*(xi + 1) + (1 - 2*xi)*(1 - xi)*(2*xi + 1) + (1 - 2*xi)*(-xi - 1)*(2*xi + 1) - 2*(1 - xi)*(xi + 1)*(2*xi + 1)) + a2*(8*xi**9/27 - xi**8/3 - 4*xi**7/7 + 2*xi**6/3 + 3*xi**5/10 - 3*xi**4/8 - xi**3/18 + xi**2/12),
                a1*(2*xi*(1/3 - 2*xi/3)*(1/2 - xi/2) + xi*(1/3 - 2*xi/3)*(-2*xi - 1)/2 + 2*xi*(1/2 - xi/2)*(-2*xi - 1)/3 + (1/3 - 2*xi/3)*(-2*xi - 1)*(xi/2 - 1/2))*(2*xi*(2 - 2*xi)*(2*xi/3 + 2/3) + 4*xi*(2 - 2*xi)*(xi + 1/2)/3 - 4*xi*(2*xi/3 + 2/3)*(xi + 1/2) + (2 - 2*xi)*(2*xi/3 + 2/3)*(2*xi + 1)) + a2*(-16*xi**9/81 + xi**8/9 + 4*xi**7/9 - 5*xi**6/27 - 14*xi**5/45 + xi**4/18 + 2*xi**3/27),
                a1*(2*xi*(1/3 - 2*xi/3)*(1/2 - xi/2) + xi*(1/3 - 2*xi/3)*(-2*xi - 1)/2 + 2*xi*(1/2 - xi/2)*(-2*xi - 1)/3 + (1/3 - 2*xi/3)*(-2*xi - 1)*(xi/2 - 1/2))*(2*xi*(xi/2 + 1/2)*(2*xi/3 + 1/3) + 2*xi*(xi/2 + 1/2)*(2*xi - 1)/3 + xi*(2*xi/3 + 1/3)*(2*xi - 1)/2 + (xi/2 + 1/2)*(2*xi/3 + 1/3)*(2*xi - 1)) + a2*(4*xi**9/81 - 2*xi**7/21 + xi**5/20 - xi**3/108),
              ],
              [
                a1*(2*xi*(1/3 - 2*xi/3)*(1/2 - xi/2) + xi*(1/3 - 2*xi/3)*(-2*xi - 1)/2 + 2*xi*(1/2 - xi/2)*(-2*xi - 1)/3 + (1/3 - 2*xi/3)*(-2*xi - 1)*(xi/2 - 1/2))*(-4*xi*(1/2 - xi)*(2/3 - 2*xi/3) + 4*xi*(1/2 - xi)*(2*xi + 2)/3 + 2*xi*(2/3 - 2*xi/3)*(2*xi + 2) + (2/3 - 2*xi/3)*(2*xi - 1)*(2*xi + 2)) + a2*(-16*xi**9/81 + xi**8/3 + 4*xi**7/21 - 5*xi**6/9 + 2*xi**5/15 + xi**4/6 - 2*xi**3/27),
                a1*(-4*xi*(1/2 - xi)*(2/3 - 2*xi/3) + 4*xi*(1/2 - xi)*(2*xi + 2)/3 + 2*xi*(2/3 - 2*xi/3)*(2*xi + 2) + (2/3 - 2*xi/3)*(2*xi - 1)*(2*xi + 2))**2 + a2*(64*xi**9/81 - 8*xi**8/9 - 16*xi**7/9 + 64*xi**6/27 + 32*xi**5/45 - 16*xi**4/9 + 16*xi**3/27),
                a1*(-4*xi*(1/2 - xi)*(2/3 - 2*xi/3) + 4*xi*(1/2 - xi)*(2*xi + 2)/3 + 2*xi*(2/3 - 2*xi/3)*(2*xi + 2) + (2/3 - 2*xi/3)*(2*xi - 1)*(2*xi + 2))*(2*(1 - 2*xi)*(1 - xi)*(xi + 1) + (1 - 2*xi)*(1 - xi)*(2*xi + 1) + (1 - 2*xi)*(-xi - 1)*(2*xi + 1) - 2*(1 - xi)*(xi + 1)*(2*xi + 1)) + a2*(-32*xi**9/27 + 2*xi**8/3 + 24*xi**7/7 - 2*xi**6 - 16*xi**5/5 + 2*xi**4 + 8*xi**3/9 - 2*xi**2/3),
                a1*(-4*xi*(1/2 - xi)*(2/3 - 2*xi/3) + 4*xi*(1/2 - xi)*(2*xi + 2)/3 + 2*xi*(2/3 - 2*xi/3)*(2*xi + 2) + (2/3 - 2*xi/3)*(2*xi - 1)*(2*xi + 2))*(2*xi*(2 - 2*xi)*(2*xi/3 + 2/3) + 4*xi*(2 - 2*xi)*(xi + 1/2)/3 - 4*xi*(2*xi/3 + 2/3)*(xi + 1/2) + (2 - 2*xi)*(2*xi/3 + 2/3)*(2*xi + 1)) + a2*(64*xi**9/81 - 16*xi**7/7 + 32*xi**5/15 - 16*xi**3/27),
                a1*(-4*xi*(1/2 - xi)*(2/3 - 2*xi/3) + 4*xi*(1/2 - xi)*(2*xi + 2)/3 + 2*xi*(2/3 - 2*xi/3)*(2*xi + 2) + (2/3 - 2*xi/3)*(2*xi - 1)*(2*xi + 2))*(2*xi*(xi/2 + 1/2)*(2*xi/3 + 1/3) + 2*xi*(xi/2 + 1/2)*(2*xi - 1)/3 + xi*(2*xi/3 + 1/3)*(2*xi - 1)/2 + (xi/2 + 1/2)*(2*xi/3 + 1/3)*(2*xi - 1)) + a2*(-16*xi**9/81 - xi**8/9 + 4*xi**7/9 + 5*xi**6/27 - 14*xi**5/45 - xi**4/18 + 2*xi**3/27),
              ],
              [
                a1*(2*xi*(1/3 - 2*xi/3)*(1/2 - xi/2) + xi*(1/3 - 2*xi/3)*(-2*xi - 1)/2 + 2*xi*(1/2 - xi/2)*(-2*xi - 1)/3 + (1/3 - 2*xi/3)*(-2*xi - 1)*(xi/2 - 1/2))*(2*(1 - 2*xi)*(1 - xi)*(xi + 1) + (1 - 2*xi)*(1 - xi)*(2*xi + 1) + (1 - 2*xi)*(-xi - 1)*(2*xi + 1) - 2*(1 - xi)*(xi + 1)*(2*xi + 1)) + a2*(8*xi**9/27 - xi**8/3 - 4*xi**7/7 + 2*xi**6/3 + 3*xi**5/10 - 3*xi**4/8 - xi**3/18 + xi**2/12),
                a1*(-4*xi*(1/2 - xi)*(2/3 - 2*xi/3) + 4*xi*(1/2 - xi)*(2*xi + 2)/3 + 2*xi*(2/3 - 2*xi/3)*(2*xi + 2) + (2/3 - 2*xi/3)*(2*xi - 1)*(2*xi + 2))*(2*(1 - 2*xi)*(1 - xi)*(xi + 1) + (1 - 2*xi)*(1 - xi)*(2*xi + 1) + (1 - 2*xi)*(-xi - 1)*(2*xi + 1) - 2*(1 - xi)*(xi + 1)*(2*xi + 1)) + a2*(-32*xi**9/27 + 2*xi**8/3 + 24*xi**7/7 - 2*xi**6 - 16*xi**5/5 + 2*xi**4 + 8*xi**3/9 - 2*xi**2/3),
                a1*(2*(1 - 2*xi)*(1 - xi)*(xi + 1) + (1 - 2*xi)*(1 - xi)*(2*xi + 1) + (1 - 2*xi)*(-xi - 1)*(2*xi + 1) - 2*(1 - xi)*(xi + 1)*(2*xi + 1))**2 + a2*(16*xi**9/9 - 40*xi**7/7 + 33*xi**5/5 - 10*xi**3/3 + xi),
                a1*(2*xi*(2 - 2*xi)*(2*xi/3 + 2/3) + 4*xi*(2 - 2*xi)*(xi + 1/2)/3 - 4*xi*(2*xi/3 + 2/3)*(xi + 1/2) + (2 - 2*xi)*(2*xi/3 + 2/3)*(2*xi + 1))*(2*(1 - 2*xi)*(1 - xi)*(xi + 1) + (1 - 2*xi)*(1 - xi)*(2*xi + 1) + (1 - 2*xi)*(-xi - 1)*(2*xi + 1) - 2*(1 - xi)*(xi + 1)*(2*xi + 1)) + a2*(-32*xi**9/27 - 2*xi**8/3 + 24*xi**7/7 + 2*xi**6 - 16*xi**5/5 - 2*xi**4 + 8*xi**3/9 + 2*xi**2/3),
                a1*(2*xi*(xi/2 + 1/2)*(2*xi/3 + 1/3) + 2*xi*(xi/2 + 1/2)*(2*xi - 1)/3 + xi*(2*xi/3 + 1/3)*(2*xi - 1)/2 + (xi/2 + 1/2)*(2*xi/3 + 1/3)*(2*xi - 1))*(2*(1 - 2*xi)*(1 - xi)*(xi + 1) + (1 - 2*xi)*(1 - xi)*(2*xi + 1) + (1 - 2*xi)*(-xi - 1)*(2*xi + 1) - 2*(1 - xi)*(xi + 1)*(2*xi + 1)) + a2*(8*xi**9/27 + xi**8/3 - 4*xi**7/7 - 2*xi**6/3 + 3*xi**5/10 + 3*xi**4/8 - xi**3/18 - xi**2/12),
              ],
              [
                a1*(2*xi*(1/3 - 2*xi/3)*(1/2 - xi/2) + xi*(1/3 - 2*xi/3)*(-2*xi - 1)/2 + 2*xi*(1/2 - xi/2)*(-2*xi - 1)/3 + (1/3 - 2*xi/3)*(-2*xi - 1)*(xi/2 - 1/2))*(2*xi*(2 - 2*xi)*(2*xi/3 + 2/3) + 4*xi*(2 - 2*xi)*(xi + 1/2)/3 - 4*xi*(2*xi/3 + 2/3)*(xi + 1/2) + (2 - 2*xi)*(2*xi/3 + 2/3)*(2*xi + 1)) + a2*(-16*xi**9/81 + xi**8/9 + 4*xi**7/9 - 5*xi**6/27 - 14*xi**5/45 + xi**4/18 + 2*xi**3/27),
                a1*(-4*xi*(1/2 - xi)*(2/3 - 2*xi/3) + 4*xi*(1/2 - xi)*(2*xi + 2)/3 + 2*xi*(2/3 - 2*xi/3)*(2*xi + 2) + (2/3 - 2*xi/3)*(2*xi - 1)*(2*xi + 2))*(2*xi*(2 - 2*xi)*(2*xi/3 + 2/3) + 4*xi*(2 - 2*xi)*(xi + 1/2)/3 - 4*xi*(2*xi/3 + 2/3)*(xi + 1/2) + (2 - 2*xi)*(2*xi/3 + 2/3)*(2*xi + 1)) + a2*(64*xi**9/81 - 16*xi**7/7 + 32*xi**5/15 - 16*xi**3/27),
                a1*(2*xi*(2 - 2*xi)*(2*xi/3 + 2/3) + 4*xi*(2 - 2*xi)*(xi + 1/2)/3 - 4*xi*(2*xi/3 + 2/3)*(xi + 1/2) + (2 - 2*xi)*(2*xi/3 + 2/3)*(2*xi + 1))*(2*(1 - 2*xi)*(1 - xi)*(xi + 1) + (1 - 2*xi)*(1 - xi)*(2*xi + 1) + (1 - 2*xi)*(-xi - 1)*(2*xi + 1) - 2*(1 - xi)*(xi + 1)*(2*xi + 1)) + a2*(-32*xi**9/27 - 2*xi**8/3 + 24*xi**7/7 + 2*xi**6 - 16*xi**5/5 - 2*xi**4 + 8*xi**3/9 + 2*xi**2/3),
                a1*(2*xi*(2 - 2*xi)*(2*xi/3 + 2/3) + 4*xi*(2 - 2*xi)*(xi + 1/2)/3 - 4*xi*(2*xi/3 + 2/3)*(xi + 1/2) + (2 - 2*xi)*(2*xi/3 + 2/3)*(2*xi + 1))**2 + a2*(64*xi**9/81 + 8*xi**8/9 - 16*xi**7/9 - 64*xi**6/27 + 32*xi**5/45 + 16*xi**4/9 + 16*xi**3/27),
                a1*(2*xi*(2 - 2*xi)*(2*xi/3 + 2/3) + 4*xi*(2 - 2*xi)*(xi + 1/2)/3 - 4*xi*(2*xi/3 + 2/3)*(xi + 1/2) + (2 - 2*xi)*(2*xi/3 + 2/3)*(2*xi + 1))*(2*xi*(xi/2 + 1/2)*(2*xi/3 + 1/3) + 2*xi*(xi/2 + 1/2)*(2*xi - 1)/3 + xi*(2*xi/3 + 1/3)*(2*xi - 1)/2 + (xi/2 + 1/2)*(2*xi/3 + 1/3)*(2*xi - 1)) + a2*(-16*xi**9/81 - xi**8/3 + 4*xi**7/21 + 5*xi**6/9 + 2*xi**5/15 - xi**4/6 - 2*xi**3/27),
              ],
              [
                a1*(2*xi*(1/3 - 2*xi/3)*(1/2 - xi/2) + xi*(1/3 - 2*xi/3)*(-2*xi - 1)/2 + 2*xi*(1/2 - xi/2)*(-2*xi - 1)/3 + (1/3 - 2*xi/3)*(-2*xi - 1)*(xi/2 - 1/2))*(2*xi*(xi/2 + 1/2)*(2*xi/3 + 1/3) + 2*xi*(xi/2 + 1/2)*(2*xi - 1)/3 + xi*(2*xi/3 + 1/3)*(2*xi - 1)/2 + (xi/2 + 1/2)*(2*xi/3 + 1/3)*(2*xi - 1)) + a2*(4*xi**9/81 - 2*xi**7/21 + xi**5/20 - xi**3/108),
                a1*(-4*xi*(1/2 - xi)*(2/3 - 2*xi/3) + 4*xi*(1/2 - xi)*(2*xi + 2)/3 + 2*xi*(2/3 - 2*xi/3)*(2*xi + 2) + (2/3 - 2*xi/3)*(2*xi - 1)*(2*xi + 2))*(2*xi*(xi/2 + 1/2)*(2*xi/3 + 1/3) + 2*xi*(xi/2 + 1/2)*(2*xi - 1)/3 + xi*(2*xi/3 + 1/3)*(2*xi - 1)/2 + (xi/2 + 1/2)*(2*xi/3 + 1/3)*(2*xi - 1)) + a2*(-16*xi**9/81 - xi**8/9 + 4*xi**7/9 + 5*xi**6/27 - 14*xi**5/45 - xi**4/18 + 2*xi**3/27),
                a1*(2*xi*(xi/2 + 1/2)*(2*xi/3 + 1/3) + 2*xi*(xi/2 + 1/2)*(2*xi - 1)/3 + xi*(2*xi/3 + 1/3)*(2*xi - 1)/2 + (xi/2 + 1/2)*(2*xi/3 + 1/3)*(2*xi - 1))*(2*(1 - 2*xi)*(1 - xi)*(xi + 1) + (1 - 2*xi)*(1 - xi)*(2*xi + 1) + (1 - 2*xi)*(-xi - 1)*(2*xi + 1) - 2*(1 - xi)*(xi + 1)*(2*xi + 1)) + a2*(8*xi**9/27 + xi**8/3 - 4*xi**7/7 - 2*xi**6/3 + 3*xi**5/10 + 3*xi**4/8 - xi**3/18 - xi**2/12),
                a1*(2*xi*(2 - 2*xi)*(2*xi/3 + 2/3) + 4*xi*(2 - 2*xi)*(xi + 1/2)/3 - 4*xi*(2*xi/3 + 2/3)*(xi + 1/2) + (2 - 2*xi)*(2*xi/3 + 2/3)*(2*xi + 1))*(2*xi*(xi/2 + 1/2)*(2*xi/3 + 1/3) + 2*xi*(xi/2 + 1/2)*(2*xi - 1)/3 + xi*(2*xi/3 + 1/3)*(2*xi - 1)/2 + (xi/2 + 1/2)*(2*xi/3 + 1/3)*(2*xi - 1)) + a2*(-16*xi**9/81 - xi**8/3 + 4*xi**7/21 + 5*xi**6/9 + 2*xi**5/15 - xi**4/6 - 2*xi**3/27),
                a1*(2*xi*(xi/2 + 1/2)*(2*xi/3 + 1/3) + 2*xi*(xi/2 + 1/2)*(2*xi - 1)/3 + xi*(2*xi/3 + 1/3)*(2*xi - 1)/2 + (xi/2 + 1/2)*(2*xi/3 + 1/3)*(2*xi - 1))**2 + a2*(4*xi**9/81 + xi**8/9 + 2*xi**7/63 - 2*xi**6/27 - 7*xi**5/180 + xi**4/72 + xi**3/108),
              ],
            ]
          )*w / grad_transf(xi,x_nodes)
          for xi,w in zip(*quad_points)
        )
    @jax.jit
    def main(u,_,state,xyz,a1=a1,a2=a2):
#         print(xyz)
        x_nodes = [ x[0] for x in xyz]
        external_term = sum(
              anp.array([
                [f(transf(xi,x_nodes))*(2*xi**4/3 - 2*xi**3/3 - xi**2/6 + xi/6)],
                [f(transf(xi,x_nodes))*(-8*xi**4/3 + 4*xi**3/3 + 8*xi**2/3 - 4*xi/3)],
                [f(transf(xi,x_nodes))*(4*xi**4 - 5*xi**2 + 1)],
                [f(transf(xi,x_nodes))*(-8*xi**4/3 - 4*xi**3/3 + 8*xi**2/3 + 4*xi/3)],
                [f(transf(xi,x_nodes))*(2*xi**4/3 + 2*xi**3/3 - xi**2/6 - xi/6)],
              ]
            )*weight * grad_transf(xi,x_nodes) for xi, weight in zip(*quad_points)
        )
        resp = jacx(u,_,state,xyz,a1=a1,a2=a2)@u + external_term
        return u, resp, state
    
    return locals()